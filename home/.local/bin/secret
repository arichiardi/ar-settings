#!/usr/bin/env bash
#
# /usr/local/bin/secret
#
# Performs backup of files, encrypting the file at destination.
# If the destination is a folder, the final file name will have a
# timestamp suffix.
#
# WARNING! If the copy to destination is successful, the original file
# is wiped.
#
# Usage:
# secret -b|--backup -s|src <file> -d|--dest <file_or_folder>
# or
# secret -r|--restore -s|--src <file> -d|--dest <file_or_folder>
#
# IF YOU CANNOT DECRYPT OLD FILES TRY -md md5
#
set -euo pipefail

answer_timeout=60
stamp=$(date "+%Y%m%d%H%M")
shred=$(which shred)
shred_args='--force --iterations=9 --zero --remove'
openssl=$(which openssl)
openssl_cipher='-aes-256-cbc -pbkdf2'

#
# Storage Options
# Only 1 set of options should be un-commented (the last one will be used).
#
# cp - Storage on a local machine.
cp_bin=cp
#
# SSH - Storage on a remote machine.
#cp_bin=scp
#
# S3 - Storage on Amazon's S3. Be sure s3cmd is installed and properly setup.
# You may need "s3cmd put --force" if you use a sub-directory.
#cp_bin=s3cmd put

# Start
do_usage() {
    echo
    echo "Performs backup of files, encrypting the file at destination."
    echo "If the destination is a folder, the final file name will have a"
    echo "timestamp suffix."
    echo
    echo "WARNING! If the copy to destination is successful, the original file"
    echo "is wiped."
    echo
    echo "Usage:"
    echo "secret -b|--backup -s|src <file> -d|--dest <file_or_folder>"
    echo "or"
    echo "secret -r|--restore -s|--src <file> -d|--dest <file_or_folder>"
    exit 1
}

openssl_opts=""
src_file=""
src_shred="yes"
dest_file=""
action=""

set +e
parsed=`getopt -o hbrks:d: --long help,restore,backup,keep-src,src:,dest: -n 'secret' -- "$@"`
set -e
eval set -- "$parsed"

while true ; do
    case "$1" in
        -r|--restore) openssl_opts="-d" ; action="restore" ; shift ;;
        -b|--backup) openssl_opts="-e -salt" ; action="backup" ; shift ;;
        -s|--src) src_file="$2" ; shift 2 ;;
        -d|--dest) dest_file="$2" ; shift 2 ;;
        -k|--keep-src) src_shred="no" ; shift ;;
        -h|--help) shift ; do_usage ; break ;;
        --) shift ; break ;;
        *) do_usage ; exit 1 ;;
    esac
done

do_error() {
  echo $1
  do_usage
}

[[ "$action" != "backup" && "$action" != "restore" ]] && do_usage
[ -z "$dest_file" ] && do_error "Destination is missing."
[ ! -f "$src_file" ] && do_error "Source file not found."

normalized_dir=""

if [ -d "$dest_file" ] ; then
    normalized_dir=$(readlink -e "$dest_file")
    dest_file=$normalized_dir/$(basename $src_file)
fi

do_shred() {
    $shred $shred_args "$1" && sync
}

[ "$src_file" = "$dest_file" ] && do_error "Source and Destination are the same file."

overwrite=n
if [ -f "$dest_file" ] ; then
    echo -n "Destination exists. Overwriting will shred the old file and write the new one at location. Proceed (y/n)? "
    read -t $answer_timeout overwrite
    overwrite=${overwrite,,}
    if [ "$overwrite" == "y" ] ; then
      do_shred $dest_file
    else
      exit 0
    fi
fi

tmp_file=/tmp/bkp$stamp

do_clean() {
  if [ "$src_shred" == "yes" ]; then
      echo -n "Shredding source file..."
      do_shred $src_file&& echo "done."
  fi
  echo -n "Shredding temp file..."
  do_shred $tmp_file && echo "done."
}

do_fail_clean_temp() {
  do_shred $tmp_file
  echo failed!
  exit 1
}

do_fail() {
  echo failed!
  exit 1
}

if [ "$action" == "backup" ]; then
    echo "Encrypting $src_file"
elif [ "$action" == "restore" ]; then
    echo "Decrypting $src_file"
fi

$openssl enc $openssl_opts $openssl_cipher -in "$src_file" -out "$tmp_file"

[ 0 -ne $? ] && do_fail_clean_temp
echo done.

$cp_bin "$tmp_file" "$dest_file"
[ 0 -ne $? ] && do_fail_clean_temp

if [ $action == "backup" ]; then
    do_clean
fi
